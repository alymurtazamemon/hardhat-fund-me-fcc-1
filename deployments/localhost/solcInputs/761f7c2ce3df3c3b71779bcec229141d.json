{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Best Practices in Solidity\n\n// 1. License Identifier\n\n// 2. Solidity Version\npragma solidity ^0.8.8;\n\n// 3. Imports locally using yarn add --dev @chainlink/contracts\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// 4. Custom Errors\nerror FundMe__NotOwner();\n\n// 5. Interfaces, Libraries and Contracts\n\n/** NatSpec\n *  @title A Contract for Cowdfunding\n *  @author Umoja Software Labs\n *  @notice This contact is to demo a sample funding contract\n *  @dev   This implements PriceFeed as a library\n\n NatSpec can be used to automatically output user \n documentation by running solc  --userdoc --devdoc example.sol\n in the terminal.\n */\n\ncontract FundMe {\n    // 1. Type Declarations\n    using PriceConverter for uint256;\n\n    // 2. State Variables\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    // 3. Events\n\n    // 4. Modifiers\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    /* 5. Functions\n       Function Order:\n       1. constructor\n       2. receive\n       3. fallback\n       4. external\n       5. public\n       6. internal\n       7. private\n       8. view / pure\n    */\n\n    // Parameterizing priceFeedAddress\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /**\n     *  @notice This function funds this contract\n     *  @dev   This implements PriceFeed as a library\n     */\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough ETH\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex = funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // ABI\n\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // 3000.00000000\n        // Converts (typecasts) int256 price into uint256 and returns value\n        return uint256(price * 1e10); // 1**10 == 10000000000\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //Always do multiplications and addition operations before you divide\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInusd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInusd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}